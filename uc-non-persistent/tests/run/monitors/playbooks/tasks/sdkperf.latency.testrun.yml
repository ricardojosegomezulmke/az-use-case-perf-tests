# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

---

- set_fact:
    sample_num: "{{item}}"
    is_warm_up_run: "{{ warm_up_run | default(False)}}"

- name: "Determine Sampling Start Time"
  block:
    - name: "get time from local host"
      shell: "date -u +%s"
      register: t_result
      delegate_to: localhost
    - set_fact:
        sample_start_ts_epoch_secs: "{{t_result.stdout}}"
  when: is_warm_up_run == False

- name: "Set Initial Sampling Start Time"
  set_fact:
    sample_start_ts_epoch_secs: "{{run_start_ts_epoch_secs}}"
  when: is_warm_up_run == True

- set_fact:
    sample_end_ts_epoch_secs: "{{(sample_start_ts_epoch_secs | int) + (sample_duration_secs | int)}}"
    sample_start_ts_str: "{{ '%Y-%m-%d %H:%M:%S%z' | strftime(sample_start_ts_epoch_secs) }}"
    sample_file_name_ts_str: "{{ '%Y-%m-%d-%H-%M-%S%z' | strftime(sample_start_ts_epoch_secs) }}"

# # TEST & DEBUG
# - name: "FORCE FAIL on sample_num==1"
#   fail:
#     msg: "forcing an error: sample_num={{sample_num}}"
#   when: sample_num == "1"

# TEST & DEBUG
# - debug:
#     msg:
#       - "sample_start_ts_epoch_secs={{sample_start_ts_epoch_secs}}"
#       - "sample_start_ts_str={{sample_start_ts_str}}"
#       - "sample_end_ts_epoch_secs={{sample_end_ts_epoch_secs}}"
#       - "sdkperf_msg_number={{sdkperf_msg_number}}"
# - pause:
#     seconds: 5

- name: "Run 'sdkperf' ..."
  shell: >
    {{ sdkperf_exe }}
    -cip={{ sdkperf_connection }}
    -cn={{ boxname }}-1
    -cu={{ sdkperf_user }}
    -cp={{ sdkperf_pwd }}
    -ptl={{ sdkperf_topic_list }}
    -stl={{ sdkperf_topic_list }}
    -mn={{ sdkperf_msg_number }}
    -msa={{ sdkperf_msg_payload_size_bytes }}
    -mr={{ sdkperf_msg_rate_per_second }}
    -psm
    {{'-lpm' if sdkperf_is_lpm else '' }}
    -l
    -lwu={{ sdkperf_warmup_secs }}
    -lb={{ sdkperf_lb }}
    -lg={{ sdkperf_lg }}
  async: "{{ sample_duration_secs }}"
  poll: 5
  register: sdkperf_result
  failed_when: "'Exception' in sdkperf_result.stderr or sdkperf_result.stdout == ''"

- name: "Parse sdkperf output as json"
  set_fact:
    # fails if output is not JSON
    sdkperf_output_json: "{{sdkperf_result.stdout | from_json}}"

- name: "Post-process latency results"
  template:
    src: "{{ latency_pp_j2_template_file }}"
    dest: "{{ result_dir }}/{{stats_name}}.{{sample_file_name_ts_str}}.json"
  delegate_to: localhost
  when: is_warm_up_run == False

- name: "Wait for sample cyle to complete"
  block:
    - name: "get time from local host"
      shell: "date -u +%s"
      register: t_result
      delegate_to: localhost
    - set_fact:
        # -1: ensures that there is at least 1 sample in every minute
        wait_secs: "{{(sample_end_ts_epoch_secs | int) - (t_result.stdout | int) - 1 }}"
    - name: "Check playbook execution time is within time span"
      fail:
        msg: "sampling execution time is too long, waiting for {{wait_secs}} is not possible. fix playbook."
      when: is_warm_up_run == False and wait_secs|int < 0
    - name: "Wait for sample cycle to complete"
      pause:
        seconds: "{{wait_secs}}"
  when: sample_num|int < ( total_num_samples|int - 1 )


###
# The End.
