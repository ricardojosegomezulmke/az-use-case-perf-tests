
# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

---
- name: "Pre-Run Processing"
  hosts: broker_pubsub
  gather_facts: no
  module_defaults:
    solace_get_vpn_clients:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ broker_pubsub.vpn_name }}"
  pre_tasks:
    - include_vars:
        file: run.vars.yml
        name: run
    - include_vars: "{{ TEST_SPEC_FILE }}"
    - include_vars:
        file: "{{ RUN_SPEC_FILE }}"
        name: run_spec
    - include_vars:
        file: "{{ SHARED_SETUP_DIR }}/{{ infrastructure }}.inventory.json"
        name: test_inventory
    - include_vars:
        file: "{{ SHARED_SETUP_DIR }}/{{ infrastructure }}.broker-nodes.json"
        name: test_broker_nodes
    - include_vars:
        file: "{{ SHARED_SETUP_DIR }}/{{ infrastructure }}.sdkperf-nodes.json"
        name: test_sdkperf_nodes
    - include_vars:
        file: "{{ SHARED_SETUP_DIR }}/{{ infrastructure }}.env.json"
        name: test_env
    - set_fact:
        test_broker_manifest_file: "{{ SHARED_SETUP_DIR }}/{{ infrastructure }}.broker.manifest.json"

  tasks:

    - name: "Read & Check Environment vars"
      set_fact:
        result_dir: "{{ RESULT_DIR }}"
        run_id: "{{ RUN_ID }}"
        run_name: "{{ RUN_NAME }}"
        pre_run_start_ts_epoch_secs: "{{PRE_RUN_START_TS_EPOCH_SECS}}"

    - set_fact:
        run_start_ts_str: "{{ '%Y-%m-%d %H:%M:%S%z' | strftime(pre_run_start_ts_epoch_secs) }}"

    - name: "Settings"
      set_fact:
        admin_protocol: "{{ 'https' if sempv2_is_secure_connection else 'http'}}"
        meta_result_file: "{{ result_dir }}/{{ run.meta_file_name }}"
        meta_j2_template_file: "./lib/run.pre.meta.j2"

    - name: "Ensure {{ result_dir }} exists"
      local_action:
        module: file
        path: "{{result_dir}}"
        state: directory

    - name: "Ensure manifest exists"
      stat:
        path: "{{ test_broker_manifest_file }}"
      register: manifest_stat
      delegate_to: localhost
    - fail:
          msg: "{{ test_broker_manifest_file }} does not exist"
      when: manifest_stat.stat.exists == false

    - name: "Read manifest"
      set_fact:
        test_broker_manifest: "{{ lookup('file', test_broker_manifest_file) | from_json }}"

    - name: "Ensure Client Username is Enabled"
      solace_client_username:
        host: "{{ sempv2_host }}"
        port: "{{ sempv2_port }}"
        secure_connection: "{{ sempv2_is_secure_connection }}"
        username: "{{ sempv2_username }}"
        password: "{{ sempv2_password }}"
        timeout: "{{ sempv2_timeout }}"
        name: "{{ broker_pubsub.client_user_name }}"
        msg_vpn: "{{ broker_pubsub.vpn_name }}"
        settings:
          enabled: true
        state: present

    - name: "Get Client Connections - Publisher & Consumer"
      solace_get_vpn_clients:
        query_params:
          where:
            - "clientName==*sdkperf-load@*"
          select: "{{ run.select_client_connection_stats }}"
      register: clients_result
    - set_fact:
        client_list: "{{ clients_result.result_list }}"

    - name: "Get Client Connections - Publishers"
      solace_get_vpn_clients:
        query_params:
          where:
            - "clientName==*publisher*"
          select:
            - clientName
      register: clients_result
    - set_fact:
        num_publishers: "{{ clients_result.result_list_count }}"
        publisher_list: "{{ clients_result.result_list }}"

    - name: "Get Client Connections - Consumers"
      solace_get_vpn_clients:
        query_params:
          where:
            - "clientName==*consumer*"
          select:
            - clientName
      register: clients_result
    - set_fact:
        num_consumers: "{{ clients_result.result_list_count }}"
        consumer_list: "{{ clients_result.result_list }}"

    - name: "Write Pre-Run Meta Data to Results"
      template:
        src: "{{ meta_j2_template_file }}"
        dest: "{{ meta_result_file }}"

###
# The End.
