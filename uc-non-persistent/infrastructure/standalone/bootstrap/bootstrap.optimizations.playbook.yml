
# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# Copyright (c) 2020, Solace Corporation, Jochen Traunecker (jochen.traunecker@solace.com)
# ---------------------------------------------------------------------------------------------

---
- name: "Bootstrap Optimizations"
  hosts: sdkperf_publishers, sdkperf_consumers, sdkperf_latency, broker_centos
  any_errors_fatal: true
  gather_facts: yes
  pre_tasks:
    - include_vars:
        file: optimization.vars.yml
        name: optimization
  # vars:
  #   deployed_dir: "{{USE_CASE_DIR}}/infrastructure/standalone/.deployed"
  vars:
    apply_kernel_optimizations: "{{ APPLY_KERNEL_OPTIMIZATIONS | default(False) }}"
    apply_mellanox_vma: "{{ APPLY_MELLANOX_VMA | default(False) }}"


  tasks:
    - name: "CHECK NOT_A_HOST: end_host"
      meta: end_host
      when: inventory_hostname == 'NOT_A_HOST'

    - name: "CHECK cloud_provider: azure only"
      fail:
        msg: "Optimizations only supported for cloud_provider=azure"
      when: cloud_provider != "azure" and (apply_kernel_optimizations|bool or apply_mellanox_vma|bool)

    # - name: check some facts
    #   debug:
    #     msg:
    #       - "distribution={{ ansible_facts.distribution }}"
    #       - "distribution_major_version={{ ansible_facts.distribution_major_version }}"
    #       - "distribution_release={{ ansible_facts.distribution_release }}"
    #       - "distribution_version={{ ansible_facts.distribution_version }}"

    - set_fact:
        kernel_vars_key: "{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_major_version }}"
    - set_fact:
        kernel_vars: "{{ optimization.kernel[kernel_vars_key] }}"

    - name: "Kernel Optimizations: sysctl"
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
      with_dict: '{{ kernel_vars.sysctl_conf | ternary(kernel_vars.sysctl_conf, {} ) }}'
      when: apply_kernel_optimizations|bool
      become: true

    - name: "Apply Mellanox VMA"
      fail:
        msg: "MELLANOX VMA: NOT IMPLEMENTED"
      when: apply_mellanox_vma|bool

    # - meta: end_host

# # Take the link of the latest version of the VMA library for your distro at
# # https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed
# dir="MLNX_OFED-5.1-2.5.8.0"
# file="MLNX_OFED_LINUX-5.1-2.5.8.0-rhel8.2-x86_64"
# wget "http://content.mellanox.com/ofed/$dir/$file.tgz"
# tar zxvf $file.tgz
# cd $file
# sudo yum install -y kernel-devel
# sudo yum install -y python3-devel
# sudo yum install -y redhat-rpm-config rpm-build gcc tcl tk
# sudo yum install -y elfutils-libelf-devel kernel-rpm-macros
# sudo bash -c "./mlnxofedinstall --guest --vma --skip-repo --add-kernel-support"
# sudo bash -c "/etc/init.d/openibd restart"
#
# sudo bash -c "echo 'kernel.shmmax = 1000000000' | tee -a /etc/sysctl.conf"
# sudo bash -c "echo 'vm.nr_hugepages = 800' | tee -a /etc/sysctl.conf"
# sudo sysctl -p
#
# sudo vmad

    # - set_fact:
    #     mellanox_vars_key: "{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_major_version }}"
    # - set_fact:
    #     mellanox_vars: "{{ optimization.kernel[kernel_vars_key] }}"
    # - name: "Download Mellanox OFED"
    #   get_url:
    #     # http://content.mellanox.com/ofed/MLNX_OFED-5.1-2.5.8.0/MLNX_OFED_LINUX-5.1-2.5.8.0-rhel8.2-x86_64.tgz
    #     url: "http://content.mellanox.com/ofed/{{ mellanox_vars.OFED_DIR }}/{{ mellanox_vars.OFED_FILE }}.tgz"
    #     dest: "{{ mellanox_vars.OFED_WORKING_DIR }}"
    #   become: true
    #
    # - name: "Untar Mellanox OFED"
    #   unarchive:
    #     src: "{{ mellanox_vars.OFED_WORKING_DIR }}/"


###
# The End.
