# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

---
- name: "PING broker node from latency node"
  hosts: sdkperf_latency
  gather_facts: yes
  vars:
    project_root_dir: "../../../../"
  pre_tasks:
    - set_fact:
        use_case_root_dir: "{{project_root_dir}}/uc-non-persistent"
    - include_vars:
        file: "{{INVENTORY_FILE}}"
        name: inventory
    - include_vars: "{{use_case_root_dir}}/ansible/vars/bootstrap.vars.yml"
    - include_vars: "{{use_case_root_dir}}/ansible/vars/sdkperf.vars.yml"
    - include_vars:
        file: "{{use_case_root_dir}}/ansible/vars/monitor.vars.yml"
        name: monitor

  tasks:

    - name: "Read & Check Environment vars"
      set_fact:
        result_dir: "{{ RESULT_DIR }}"
        run_id: "{{ RUN_ID }}"
        run_start_ts_epoch_secs: "{{RUN_START_TS_EPOCH_SECS}}"
        stats_name: "{{ STATS_NAME }}"

    - name: "Settings"
      set_fact:
        min_collection_period_secs: 15
        sampling_overhead_secs: 15
        is_solace_cloud: "{{ True if inventory.all.hosts.broker_pubsub.sempv2_is_secure_connection else False }}"
        sample_run_time_secs: "{{monitor.general.sample_run_time_secs}}"
        ping_post_process_exe: "./lib/post-process.ping.sh"
        ping_post_process_template_file: "./lib/ping.template.json"

    - name: "Check if Solace Cloud - can't ping"
      debug:
        msg: "cannot ping a Solace Cloud Broker, ending play for host ..."
      when: is_solace_cloud == True

    - name: "Abort if broker is Solace Cloud"
      meta: end_host
      when: is_solace_cloud == True

    - name: "Calculate Parameters"
      set_fact:
        ping_msg_number: "{{(sample_run_time_secs | int) - sampling_overhead_secs }}"

    - name: "Check Local Files Exist"
      stat:
        path: "{{item}}"
      register: stat_result
      failed_when: not stat_result.stat.exists
      delegate_to: localhost
      with_items:
        - "{{ping_post_process_exe}}"
        - "{{ping_post_process_template_file}}"

    - name: "Check input"
      fail:
        msg:
          - "ping collection period too short, must be at least {{min_collection_period_secs}} seconds"
          - "monitor.general.sample_run_time_secs={{monitor.general.sample_run_time_secs}}"
          - "sampling_overhead_secs={{sampling_overhead_secs}}"
          - "collection period = {{monitor.general.sample_run_time_secs - sampling_overhead_secs}}"
      when: (monitor.general.sample_run_time_secs - sampling_overhead_secs) < min_collection_period_secs

    - name: "Ensure {{ result_dir }} exists"
      local_action:
        module: file
        path: "{{result_dir}}"
        state: directory

    # # TEST & DEBUG
    # - name: "TEST: Simulate delay in startup"
    #   pause:
    #     seconds: 15

    - name: "Warmup Sample Runs"
      include_tasks: ./tasks/sdkperf.ping.testrun.yml
      vars:
        warm_up_run: true
      with_sequence: "end=0 start=0"

    - name: "Starting Sample Runs"
      include_tasks: ./tasks/sdkperf.ping.testrun.yml
      with_sequence: "end={{monitor.general.total_num_samples-1}} start=0"

###
# The End.
