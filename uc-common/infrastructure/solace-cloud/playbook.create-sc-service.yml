
# ---------------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke (ricardo.gomez-ulmke@solace.com)
# ---------------------------------------------------------------------------------------------

-
  name: "Create Solace Cloud Service"
  hosts: "{{ SOLACE_CLOUD_ACCOUNTS }}"
  gather_facts: no
  any_errors_fatal: true

  tasks:

    - include_vars:
        file: "./vars/vars.sc-service.yml"
        name: sc_service

    - name: "Create Solace Cloud Service"
      solace_cloud_service:
        api_token: "{{ api_token }}"
        name: "{{ sc_service.name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes: "{{ sc_service.attributes | default(omit) }}"
        state: present
      register: result

    - set_fact:
        sc_service_created_interim_info: "{{ result.response }}"
        sc_service_created_id: "{{ result.response.serviceId }}"

    - name: "Print Solace Cloud Service: service id"
      debug:
        msg: "service_id = {{ sc_service_created_id }}"

    - name: "Wait for Service Provisioning to Complete"
      solace_cloud_get_service:
        api_token: "{{ api_token }}"
        service_id: "{{ sc_service_created_id }}"
      register: get_service_result
      until: "get_service_result.rc != 0 or get_service_result.response.creationState == 'completed'"
      # wait max for 40 * 30 seconds, then give up
      retries: 40
      delay: 30 # Every 30 seconds
      no_log: true

    - set_fact:
        sc_service_created_info: "{{ get_service_result.response }}"

    - name: "Save New Solace Cloud Service Facts to File"
      local_action:
        module: copy
        content: "{{ sc_service_created_info | to_nice_json }}"
        dest: "./tmp/facts.solace_cloud_service.{{ sc_service.name }}.json"
      changed_when: false

    - name: "Get Host Inventory"
      solace_cloud_get_facts:
        from_dict: "{{ sc_service_created_info }}"
        get_formattedHostInventory:
          host_entry: "{{ sc_service.name }}"
          api_token: "{{ api_token }}"
      register: results

    - name: "Save Solace Cloud Service Inventory to File"
      local_action:
        module: copy
        content: "{{ results.facts.formattedHostInventory | to_nice_json }}"
        dest: "./tmp/generated/inventory.sc-service.{{sc_service.name}}.json"
      changed_when: false

###
# The End.
